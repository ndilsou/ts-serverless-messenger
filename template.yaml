AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  serverless-messenger-chat-app

Parameters:
  TableName:
    Type: String
    Default: "serverless_messenger_dev"
    Description: (Required) The name of the new DynamoDB to store data for the application. Minimum 3 characters
    MinLength: 3
    MaxLength: 50
    AllowedPattern: ^[A-Za-z_]+$
    ConstraintDescription: "Required. Can be characters and underscore only. No numbers or special characters allowed."

Globals:
  Function:
    Timeout: 3
    MemorySize: 128
    Runtime: nodejs12.x

Resources:
  ServerlessWebSocketApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: serveless-messenger
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.action"

  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ServerlessWebSocketApi
      RouteKey: $connect
      AuthorizationType: NONE
      OperationName: ConnectRoute
      Target: !Sub "integrations/${WebSocketInteg}"

  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ServerlessWebSocketApi
      RouteKey: $disconnect
      AuthorizationType: NONE
      OperationName: ConnectRoute
      Target: !Sub "integrations/${WebSocketInteg}"

  DefaultRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ServerlessWebSocketApi
      RouteKey: $default
      AuthorizationType: NONE
      OperationName: ConnectRoute
      Target: !Sub "integrations/${WebSocketInteg}"

  WebSocketInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ServerlessWebSocketApi
      Description: Websocket Handler Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RealtimeMessagingFunction.Arn}/invocations

  Deployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
      - ConnectRoute
      - DefaultRoute
      - DisconnectRoute
    Properties:
      ApiId: !Ref ServerlessWebSocketApi

  Stage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: Prod
      Description: Prod Stage
      DeploymentId: !Ref Deployment
      ApiId: !Ref ServerlessWebSocketApi

  Table:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "HK"
          AttributeType: "S"
        - AttributeName: "SK"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "HK"
          KeyType: "HASH"
        - AttributeName: "SK"
          KeyType: "RANGE"
      TimeToLiveSpecification:
        AttributeName: TTL
        Enabled: true
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2
      BillingMode: PROVISIONED
      SSESpecification:
        SSEEnabled: false
      TableName: !Ref TableName

  RealtimeMessagingFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: realtime.handler
      Environment:
        Variables:
          TABLE_NAME: !Ref TableName
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TableName
        - Statement:
            - Effect: Allow
              Action:
                - "execute-api:ManageConnections"
              Resource:
                - !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ServerlessWebSocketApi}/*"

  RealtimeMessagingPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - ServerlessWebSocketApi
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref RealtimeMessagingFunction
      Principal: apigateway.amazonaws.com

  RestApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: api.handler
      Environment:
        Variables:
          TABLE_NAME: !Ref TableName
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TableName
      Events:
        CreateUser:
          Type: HttpApi
          Properties:
            Path: /users
            Method: post
        GetUser:
          Type: HttpApi
          Properties:
            Path: /users/{userId}
            Method: get
        GetUserConversations:
          Type: HttpApi
          Properties:
            Path: /users/{userId}/conversations
            Method: get
        CreateConversation:
          Type: HttpApi
          Properties:
            Path: /conversations
            Method: post
        GetConversation:
          Type: HttpApi
          Properties:
            Path: /conversations/{convoId}
            Method: get
        CreateConversationParticipant:
          Type: HttpApi
          Properties:
            Path: /conversations/{convoId}/participants
            Method: post
        GetConversationParticipants:
          Type: HttpApi
          Properties:
            Path: /conversations/{convoId}/participants
            Method: get
        DeleteConversationParticipant:
          Type: HttpApi
          Properties:
            Path: /conversations/{convoId}/participants/{userId}
            Method: delete
        GetAllConversationEventsEvent:
          Type: HttpApi
          Properties:
            Path: /conversations/{convoId}/events
            Method: get

Outputs:
  TableArn:
    Description: "Connections table ARN"
    Value: !GetAtt Table.Arn

  HandleWebSocketFunctionArn:
    Description: "handleWebSocket function ARN"
    Value: !GetAtt RealtimeMessagingFunction.Arn

  HandleHttpFunctionArn:
    Description: "handleHttp function ARN"
    Value: !GetAtt RestApiFunction.Arn

  WebSocketURI:
    Description: "The WSS Protocol URI to connect to"
    Value: !Sub "wss://${ServerlessWebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}"

  HttpURI:
    Description: "API Gateway endpoint URL for the current stage of the function"
    Value: !Sub "https://${ServerlessHttpApi}.execute-api.${AWS::Region}.amazonaws.com/"
